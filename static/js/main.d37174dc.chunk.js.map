{"version":3,"sources":["Cube.tsx","Table.tsx","Sample.tsx","App.tsx","serviceWorker.js","index.js"],"names":["CustomEvent","detail","Cube","props","twisty_ref","React","useRef","useState","twisty","setTwisty","queue","useEffect","twisty2","Twisty","current","alg","Sequence","console","log","experimentalSetAlg","parse","scramble","timelineSeq","timeline","push","now","id","setInterval","bm","Date","timeStamp","shift","bm_next","experimentalAddMove","move","Math","min","clearInterval","counter","className","ref","Table","data","avg_data","time","curr_step","tot_time","tot_count","i","stages","length","count","solved","format_delta","avg_time","delta_time","percent","delta_str","toFixed","aggregates","name","metaAggregates","span","aggr_row","desc","curr_step_mod","idx","indexOf","step_time","delta_color","res","curr_stage","current_stage","style","backgroundColor","color","moves","scramble_stage","fontSize","map","d","key","colSpan","meta_idx","meta_row","meta_td","rowSpan","make_empty_table","right_rows","left_rows","make_table","emptySolve","starting_time","solves","CubeLoader","seq","useMemo","offset","s","cumu_time","step","step_time_ms","step_seq","nestedUnits","pause","block_move","App","currTime","setCurrTime","videoRef","x","setX","a","setA","l","r","u","margin","setMargin","y","setY","vh","setVH","sz","setSz","JSON","stringify","dataText","setDataText","setData","incrCounter","video","duration","currentTime","func","activeSolve","filter","pop","displayTime","avgSolve","get_avg","arr","sort","b","sum","equiv","solve","stage","avg","top","left","transform","width","height","paddingLeft","paddingRight","paddingTop","paddingBottom","format","controls","onClick","display","rows","cols","onChange","e","target","value","type","file","videofile","File","videourl","URL","createObjectURL","src","load","setVideo","files","flexWrap","htmlFor","max","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d37174dc.chunk.js","sourcesContent":["import './Cube.css';\nimport './Twisty.css';\nimport React, { useEffect } from 'react'\nimport { algToString, invert, parse, Sequence, BlockMove } from \"cubing/alg\";\nimport { Twisty } from \"cubing/twisty\";\n\n\nlet c_event = new CustomEvent(\"moves\",{detail: 3});\n\nexport type Timeline = {\n    move: BlockMove,\n    timeStamp: number\n}\nfunction scrambleFor(s : Timeline[]) {\n    let arr : BlockMove[] = []\n    for (let t of s) { arr.push(t.move) }\n    const seq = new Sequence(arr)\n    return invert(seq)\n}\n\n\nexport default function Cube(props: {timelineSeq: Timeline[], counter: number, scramble: string}) {\n    const twisty_ref = React.useRef(null)\n    const [twisty, setTwisty] = React.useState<Twisty|null>(null)\n    const queue = React.useRef<Timeline[]>([])\n\n    React.useEffect( () => {\n        const twisty2 =\n            new Twisty(twisty_ref.current!, { alg: new Sequence([]) })\n        console.log(\"New twisty2\")\n        setTwisty(twisty2)\n    }, [])\n    React.useEffect( () => {\n        if (twisty === null) return\n        twisty!.experimentalSetAlg(parse(props.scramble))// ? scrambleFor(props.timelineSeq))\n        //if (movSeq && movSeq.nestedUnits.length > 0) {\n        queue.current = []\n        for (let timeline of props.timelineSeq) {\n            queue.current.push(timeline)\n        }\n        let now : number | null = null\n        const tick = () => {\n            const bm = queue.current[0]\n            if (now === null) now = Date.now()\n            if (twisty && bm) {\n                let time_elapsed = Date.now() - now\n                if (time_elapsed >= bm.timeStamp) {\n                    queue.current.shift()\n                    const bm_next = queue.current[0]\n                    if (bm_next) {\n                        twisty!.experimentalAddMove(bm.move, Math.min(200, bm_next.timeStamp - bm.timeStamp))\n                        //id = setTimeout(tick, bm_next.timeStamp - bm.timeStamp)\n                    } else {\n                        twisty!.experimentalAddMove(bm.move, 300)\n                    }\n                }\n            }\n        }\n        let id = setInterval(tick, 20);\n        return () => clearInterval(id);\n    }, [twisty, props.counter] )\n\n    return <div className=\"twisty-wrapper\">\n        <div className=\"twisty\" ref={twisty_ref}> </div>\n        {/* {twisty_obj ? twisty_obj.element : null} */}\n    </div>\n}","import React from 'react';\nimport './Table.css';\nimport { Stage, StageAvg, Solve } from './Defs';\n\ntype Format = {\n    l: number;\n    r: number;\n}\n\nexport default function Table(props: { data: Solve, avg_data: StageAvg[], time: number, format: Format }) {\n    let { data, avg_data, time } = props\n    let curr_step = -1, tot_time = 0, tot_count = 0\n    for (var i = 0; i < data.stages.length; i++) {\n      tot_time += data.stages[i].time\n      tot_count += data.stages[i].count\n      if (time <= tot_time) {\n        curr_step = i; break;\n      }\n    }\n    let solved = time >= tot_time\n\n    const format_delta = (time: number, avg_time: number) => {\n      let delta_time = time - avg_time\n      const eps = 1e-6;\n      let percent = delta_time / (avg_time + eps)\n      let delta_str = (delta_time < 0) ? \"\" : (\"+\");\n      delta_str += delta_time.toFixed(2)\n\n      let color\n      if (percent < -0.1) {\n        // very good, green\n        color = \"limegreen\"\n      } else if (percent < 0) {\n        color = \"yellow\";\n      } else if (percent < 0.1) {\n        color = \"white\";\n      } else {\n        color = \"red\";\n      }\n      return [delta_str, color]\n    }\n    const aggregates = [\n      {name: \"FB\", stages:  [0]},\n      {name: \"SB\", stages:  [1, 2]},\n      {name: \"CMLL\", stages: [3] },\n      {name: \"LSE\", stages: [4, 5] }\n    ]\n    const metaAggregates = [\n      {name: \"F2B\", stages: [0, 1, 2], span: 2},\n      {name: \"L10P\", stages:  [3, 4, 5], span: 2},\n    ]\n\n    const aggr_row = ( desc: {name: string, stages: number[]}, i: number) => {\n      let {name, stages} = desc\n      // if it is done\n      let curr_step_mod = curr_step\n      if (solved) {\n        curr_step_mod = data.stages.length;\n      }\n      let idx = stages.indexOf(curr_step_mod)\n      let step_time : number | string = 0\n      let delta_time, delta_color = \"white\"\n      if (idx !== -1) {\n        for (let i = 0; i < idx; i++) step_time += data.stages[ stages[i] ].time\n        step_time += data.stages[curr_step_mod].time - (tot_time - time)\n      } else if (stages[0] > curr_step_mod) {\n        step_time = 0\n      } else {\n        let avg_time = 0\n        for (let i = 0; i < stages.length; i++) {\n          step_time += data.stages[ stages[i] ].time\n          avg_time += avg_data[ stages[i] ].time\n        }\n        let res = format_delta(step_time , avg_time)\n        delta_time = res[0]\n        delta_color = res[1]\n      }\n      return {name, step_time, delta_color, delta_time}\n    }\n\n    const make_table = () => {\n      let right_rows = aggregates.map(aggr_row)\n      let left_rows = metaAggregates.map(aggr_row)\n      let meta_idx = 0, meta_row = 0\n\n      let make_right_row = (d : any, i: number) => {\n        let {name, delta_color, delta_time, step_time} = d\n        let meta_td = null\n        if (i === meta_row) {\n          const span = metaAggregates[meta_idx].span\n          meta_row += meta_row + span\n          meta_td = <td className=\"table-meta-td\" rowSpan={span}>\n            {left_rows[meta_idx].step_time.toFixed(2)}\n          </td>\n          meta_idx ++\n        }\n        return (\n          <tr key={i}  className={ \"inactive\"}>\n            <td className=\"table-name-td\">\n              {name} </td>\n            <td className=\"table-delta-td\" style={{color: delta_color}}> {delta_time} </td>\n            <td className=\"table-time-td\"> { (typeof step_time === \"string\") ? step_time : step_time.toFixed(2)} </td>\n\n            {meta_td}\n          </tr>\n      )}\n\n      return right_rows.map(make_right_row)\n    }\n\n\n    const make_empty_table = () => {\n        let meta_idx = 0, meta_row = 0\n      const empty_aggr_row = (desc: {name: string, stages: number[]}, i: number) => {\n          let {name, stages} = desc\n          let meta_td = null\n          if (i === meta_row) {\n            const span = metaAggregates[meta_idx].span\n            meta_row += meta_row + span\n            meta_td = <td className=\"table-meta-td\" rowSpan={span}>\n              -\n            </td>\n            meta_idx ++\n          }\n          return (\n          <tr key={i}  className={ \"inactive\"}>\n              <td className=\"table-name-td\">\n                  {name} </td>\n              <td className=\"table-delta-td\"> </td>\n              <td className=\"table-time-td\"> - </td>\n              {meta_td}\n          </tr>\n          )\n      }\n      return aggregates.map(empty_aggr_row)\n    }\n\n    const row = (d: Stage, i: number) => {\n      let delta_time\n      let delta_color = \"white\"\n      let step_time : string | number = -1\n      if (i === curr_step) {\n        step_time = d.time - (tot_time - time)\n        delta_time = \"\"\n      } else if (curr_step === -1 || i < curr_step) {\n        step_time = d.time\n        let res = format_delta(d.time , avg_data[i].time)\n        delta_time = res[0]\n        delta_color = res[1]\n      } else {\n        step_time = \"\";\n        delta_time = \"\"\n      }\n      return (\n        <div className=\"party\" key={i} style={{backgroundColor: d.color}}>\n           <div className=\"party-bar\">\n           <div className=\"party-name\">\n             {d.name}\n          </div>\n          <div className=\"party-stat\" >\n              {`${d.count} | ${d.time.toFixed(2)}s | ${(d.count / d.time).toFixed(2)}tps`}\n          </div>\n         </div>\n          <div className=\"party-moves\">\n              {d.moves}\n          </div>\n        </div>\n      )\n    }\n\n    const curr_stage = (curr_step ===-1 && tot_time + 15 > time) ? data.stages[data.stages.length - 1]\n      : data.stages[curr_step]\n    const current_stage = <div className=\"stageContainer\">\n        <div className=\"stageName\"\n            style={{backgroundColor: curr_stage?.color || \"black\"}}>\n                {curr_stage?.name || \"\"}\n        </div>\n        <div className=\"stageMoves\">{curr_stage?.moves || \"\"}</div>\n    </div>\n\n    const scramble_stage = <div className=\"stageContainer\">\n        <div className=\"stageName\" style={{backgroundColor: \"silver\", fontSize: 30}}>\n            Scramble\n        </div>\n        <div className=\"stageMoves\">\n            {data.scramble}\n        </div>\n    </div>\n\n    const recap_stage = <div>\n        {/* <table> <tbody> */}\n        {data.stages.map(row)}\n        {/* </tbody>\n        </table> */}\n    </div>\n\n    //console.log(format)\n    return (\n       <div>\n      <div className=\"table\">\n         {time < 0 ? scramble_stage : (false) ? recap_stage : current_stage}\n      <table>\n        <tbody>\n        <tr> <td colSpan={4}> <hr></hr> </td> </tr>\n        { (data.stages.length === 0 || time < 0) ?\n          make_empty_table() :\n          make_table() }\n        </tbody>\n        <tr> <td colSpan={4}> <hr></hr> </td> </tr>\n      </table>\n      <div>\n        <div className=\"time\"> {(time < 0 ? 0 : Math.min(time, tot_time)).toFixed(2)} </div>\n      </div>\n      <div>\n        <div className=\"moves\"> {solved && tot_count > 0? `${tot_count} ETM, ${(tot_count / tot_time).toFixed(2)} ETPS` :\"\" } </div>\n      </div>\n      <div>\n      </div>\n      </div>\n      </div>\n    )\n  }","import { Stage, StageAvg, Solve } from './Defs';\n\nconst avg_solve : StageAvg[] = [\n    {name: \"FB\", time: 1.16},\n    {name: \"SS\", time: 1.67},\n    {name: \"SP\", time: 0.33},\n    {name: \"CMLL\", time: 1.57},\n    {name: \"EOLRb\", time: 1.17},\n    {name: \"EP\", time: 0.75},\n]\n\nconst solve1: Stage[] = [\n    { name: \"FB\", color: \"darkseagreen\", moves: \"z' R' U F' U R U' M' f' z\", time: 2.27, count: 10 },\n    { name: \"SS\", color: \"orange\", moves: \"R U R' U2' R r U R'\", time: 1.48, count: 8 },\n    { name: \"SP\", color: \"#f2cd05\", moves: \" U' M2' U2' r' U' R\", time: 1.30, count: 6 },\n    { name: \"CMLL\", color: \"steelblue\", moves: \"R U R' U' R' F R R U' R' U' R U R' F'\", time: 2.31, count: 15 },\n    { name: \"EOLRb\", color: \"mediumpurple\", moves: \"U' M U2' M' U' U' M2'\", time: 1.53, count: 7 },\n    { name: \"EP\", color: \"indianred\", moves: \" U M' U2' M U2' \", time: 1.00, count: 5 }\n]\n\nconst emptySolve: Solve = {\n    starting_time: 0,\n    stages: [\n        // {\"name\": \"FB\", time: 0.00, color: \"\", count: 0, moves: \"\"},\n        // {\"name\": \"SS\", time: 0.00, color: \"\", count: 0, moves: \"\"},\n        // {\"name\": \"SP\", time: 0.00, color: \"\", count: 0, moves: \"\"},\n        // {\"name\": \"CMLL\", time: 0.00, color: \"\", count: 0, moves: \"\"},\n        // {\"name\": \"EOLRb\", time: 0.00, color: \"\", count: 0, moves: \"\"},\n        // {\"name\": \"EP\", time: 0.00, color: \"\", count: 0, moves: \"\"},\n    ],\n    scramble: \"\"\n}\n\n\nconst solves: Solve[] = [\n    {\n        \"stages\":\n            [{ \"name\": \"FB\", \"color\": \"#8b69db\", \"moves\": \"l r U' x' D2' r' F'\", \"time\": 1.16666666666667, \"count\": 7 }, { \"name\": \"SS\", \"color\": \"#69bddb\", \"moves\": \"R2 U M' U R U' r U r' U' r2\", \"time\": 2, \"count\": 11 }, { \"name\": \"SP\", \"color\": \"#699adb\", \"moves\": \"U' R'\", \"time\": 0.2, \"count\": 2 }, { \"name\": \"CMLL\", \"color\": \"#69db73\", \"moves\": \"M' L' U' L U' L' U L U' L' U L U' L' U2 L\", \"time\": 1.56666666666667, \"count\": 16 }, { \"name\": \"EOLRb\", \"color\": \"#db9169\", \"moves\": \"U' M' U2' M' U2' M U' M' U2' M2'\", \"time\": 1.1, \"count\": 10 }, { \"name\": \"EP\", \"color\": \"#d15e5e\", \"moves\": \"U' M' U2' M' U2' M2'\", \"time\": 0.746666666666667, \"count\": 6 }],\n        starting_time: 530 / 30,\n        scramble: \"D' F2 L2 U F2 U B2 L2 B2 F2 U' F' D' R F' L B L F2 D2 B' y\"\n    },\n    { \"stages\": [{ \"name\": \"FB\", \"color\": \"#8b69db\", \"moves\": \"U' R' u U M' U' R B'\", \"time\": 1.06666666666667, \"count\": 8 }, { \"name\": \"SS\", \"color\": \"#69bddb\", \"moves\": \"U R U' R' U2' r U r'\", \"time\": 1.8, \"count\": 8 }, { \"name\": \"SP\", \"color\": \"#699adb\", \"moves\": \"U R' U2' R\", \"time\": 0.4, \"count\": 4 }, { \"name\": \"CMLL\", \"color\": \"#69db73\", \"moves\": \"M' U2 R U2' R2' F R F' U2' R' F R F'\", \"time\": 1.56666666666667, \"count\": 13 }, { \"name\": \"EOLRb\", \"color\": \"#db9169\", \"moves\": \"U' M U' M' U M' U2' M'\", \"time\": 1.03333333333333, \"count\": 8 }, { \"name\": \"EP\", \"color\": \"#d15e5e\", \"moves\": \"U' M2' U2' M U2' M'\", \"time\": 0.723333333333334, \"count\": 6 }], starting_time: 1300 / 30, scramble: \"R2 U' R2 B2 L2 U R2 D B2 D B' L' U' B U' L F L F2 U' L2 y2\" },\n    { \"stages\": [{ \"name\": \"FB\", \"color\": \"#8b69db\", \"moves\": \"D' L' U2 L' D' R2 U R' U F'\", \"time\": 1.56666666666667, \"count\": 10 }, { \"name\": \"SS\", \"color\": \"#69bddb\", \"moves\": \"U R U R U R2'\", \"time\": 1.23333333333333, \"count\": 6 }, { \"name\": \"SP\", \"color\": \"#699adb\", \"moves\": \"U r\", \"time\": 0.266666666666667, \"count\": 2 }, { \"name\": \"CMLL\", \"color\": \"#69db73\", \"moves\": \"U2' R' F R U F U' R U R' U' F'\", \"time\": 1.4, \"count\": 12 }, { \"name\": \"EOFBb\", \"color\": \"#db9169\", \"moves\": \"U2' M'\", \"time\": 0.533333333333333, \"count\": 2 }, { \"name\": \"EP\", \"color\": \"#d15e5e\", \"moves\": \"U' M' U2' M U2' M' U'\", \"time\": 0.76, \"count\": 7 }], starting_time: 2038 / 30, scramble: \"L2 B2 U2 R2 B2 R2 U L2 D2 U B2 F L D2 U2 L' B U' F' R' D' z y\" },\n    { \"stages\": [{ \"name\": \"FB\", \"color\": \"#8b69db\", \"moves\": \"u r' B' r' F r F'\", \"time\": 1.23333333333333, \"count\": 7 }, { \"name\": \"SS\", \"color\": \"#69bddb\", \"moves\": \"U' R' U R U R' U2' R2\", \"time\": 1.2, \"count\": 8 }, { \"name\": \"SP\", \"color\": \"#699adb\", \"moves\": \"U2' M' U' r'\", \"time\": 0.4, \"count\": 4 }, { \"name\": \"CMLL\", \"color\": \"#69db73\", \"moves\": \"U2' F R' F' R U2 R U2' R'\", \"time\": 1.56666666666667, \"count\": 9 }, { \"name\": \"EOLRb\", \"color\": \"#db9169\", \"moves\": \"M' U' M' U' M U' M' U' M2' U2' M2'\", \"time\": 1.36666666666667, \"count\": 11 }, { \"name\": \"EP\", \"color\": \"#d15e5e\", \"moves\": \"U M' U2' M2' U2' M' U2' M2'\", \"time\": 0.793333333333332, \"count\": 8 }], starting_time: 2668 / 30, scramble: \"D L2 F2 R2 D B2 D R2 D' U2 L2 F' D' L' D2 B' U F R B z y2\" }\n]\n\nexport { solves, emptySolve }","import React, { useEffect } from 'react';\nimport './App.css';\nimport Cube, { Timeline } from './Cube';\nimport Table from './Table';\nimport { parse } from \"cubing/alg\";\nimport { Solve, StageAvg } from './Defs';\nimport { solves, emptySolve } from './Sample';\n\nimport { Button } from 'rebass';\n\nconst PREAMBLE = 5.0\nconst APP_TOP = 30, APP_LEFT = 30\n\nfunction CubeLoader(props: {counter: number, data: Solve, time: number}) {\n  let { data, time, counter } = props\n  let seq = React.useMemo( () => {\n    const offset = (data.starting_time - time) * 1000\n    let s = []\n    let cumu_time = 0\n    for (let step of data.stages) {\n      let step_time_ms = step.time * 1000\n      let step_seq = parse(step.moves).nestedUnits\n      console.log(step, step_seq)\n\n      // let's \"guess the pause\"!!\n      const pause = Math.min(250, step_time_ms * 0.3)\n      for (let i = 0; i < step_seq.length; i++) {\n        let block_move = step_seq[i]\n        s.push({\n          move: block_move,\n          timeStamp: cumu_time + pause + (step_time_ms- pause)/ step_seq.length * i + offset\n        } as Timeline)\n      }\n      cumu_time += step_time_ms\n    }\n    return s\n  }, [data, counter])\n  return <Cube timelineSeq={seq} counter={counter} scramble={data.scramble}/>\n}\n\nconst APP_WIDTH = 300, APP_HEIGHT = 720\n\nfunction App() {\n  const [currTime, setCurrTime ] = React.useState(25)\n  const videoRef = React.useRef<HTMLVideoElement | null>(null)\n  const [x, setX] = React.useState(20)\n  const [a, setA] = React.useState(0.9)\n  const [margin, setMargin]= React.useState({l: 10, r:10, u: 10, d:20})\n  const [y, setY] = React.useState(1)\n  const [vh, setVH] = React.useState(900)\n  const [sz, setSz] = React.useState(0.8)\n\n  const [dataText, setDataText] = React.useState(JSON.stringify(solves, null, 2))\n  const [data, setData] = React.useState<Solve[]>(solves)\n\n  const [counter, incrCounter] = React.useState(0)\n\n  useEffect( () => {\n    const handleVideoTimeUpdate = () => {\n      const func = () => {\n        if (videoRef.current === null) return;\n        let video = videoRef.current;\n        if (!video) return;\n        if (video.duration > 1)\n          setCurrTime(video.currentTime)\n\n      }\n      func();\n    }\n    const i = setInterval(handleVideoTimeUpdate, 30);\n    return () => clearInterval(i)\n  })\n\n  const activeSolve = data.filter((s: Solve, i: number) => {\n     return s.starting_time - PREAMBLE <= currTime\n  }).pop() || emptySolve\n\n  // const activeSolve_time = React.useMemo(() => {\n  //   if (activeSolve) {\n  //     return activeSolve.stages.map(x => x.time).reduce((x, y) => x + y, 0)\n  //   } else return 0\n  // }, [activeSolve])\n\n  useEffect( () => {\n    incrCounter(counter + 1)\n  }, [activeSolve] )\n\n  const displayTime = activeSolve ? (currTime - activeSolve.starting_time) : 0\n\n  // On the edge we start triggering the animation\n  const setVideo = (file: Blob) => {\n    let videofile = new File([file], 'videofile');\n    let videourl = URL.createObjectURL(videofile);\n    if (videoRef.current) {\n      videoRef.current!.src = videourl;\n      videoRef.current!.load();\n      videoRef.current!.currentTime = currTime;\n    }\n  }\n  const resetTime = () => incrCounter(counter + 1)\n\n  const avgSolve = React.useMemo( () => {\n    if (data.length === 0) return []\n    const get_avg = (arr : number[]) => {\n      arr.sort((a, b) => a - b)\n      let sum = 0\n      for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n      }\n      if (arr.length <= 3) return sum / arr.length\n      return (sum - arr[0] - arr[arr.length - 1]) / (arr.length - 2)\n    }\n    const a : any = {}\n    const equiv = (s : string) => {\n      return (s === 'EOFBb' ? 'EOLRb' : s)\n    }\n    for (let stage of data[0].stages) a[equiv(stage.name)] = []\n    console.log(a)\n    for (let solve of data) {\n      for (let stage of solve.stages) {\n        a[equiv(stage.name)].push(stage.time)\n      }\n    }\n    let avg : StageAvg[] = [];\n    for (let stage of data[0].stages) {\n      avg.push({name: equiv(stage.name), time: get_avg(a[equiv(stage.name)])})\n    }\n    console.log(\"Session avg data\", avg)\n    return avg\n  }, [data])\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"tableContainer\"\n        style={{top: `${APP_TOP + y}px`, left: `${APP_LEFT + x}px`, transform: `scale(${sz})`, width: APP_WIDTH + margin.l + margin.r,\n        height: APP_HEIGHT + margin.u + margin.d,\n        backgroundColor: `rgba(0, 0, 0, ${a})`}}\n      >\n        <div style={{paddingLeft: margin.l + \"px\", paddingRight: margin.r + \"px\",\n      paddingTop: margin.u + \"px\", paddingBottom: margin.d + \"px\"}}>\n        <Table data={activeSolve} avg_data={avgSolve} time={displayTime} format={margin}></Table>\n\n        <div className=\"cubeContainer\">\n            <CubeLoader counter={counter} data={activeSolve} time={currTime}></CubeLoader>\n        </div>\n        </div>\n      </div>\n      <div className=\"videoContainer\">\n      <video\n                controls\n                height={vh}\n                width={vh * 1.8}\n                ref={videoRef}\n                // onTimeUpdate={this.handleVideoTimeUpdate}\n      />\n      </div>\n      <div className=\"panelContainer\">\n      <div>\n        <Button onClick={resetTime}> Replay current solve </Button>\n      </div>\n\n      <div style={{display: \"flex\"}}>\n\n      <div>\n\n        <div>\n          <br></br>\n          <Button onClick={() => setData(JSON.parse(dataText))}> Set data </Button>\n          <textarea rows={10} cols={80}\n            onChange={(e) => setDataText(e.target.value)}  value={dataText}\n            />\n        </div>\n        <label>\n\n        Upload video:\n        <input type=\"file\"\n          onChange={(e: any) => {\n            setVideo(e.target.files[0])\n        }} />\n        </label>\n      </div>\n\n      <div style={{display: \"flex\", flexWrap: \"wrap\"}}>\n      <div>\n      <label htmlFor='x'>x: {x} </label>\n      <input type=\"range\"\n        min={0} max={2000} value={x} onChange={(e:any) => { setX(e.target.value) } }\n      /></div>\n\n      <div>\n      <label>y: {y}</label>\n      <input type=\"range\"\n            min={0} max={1000} value={y}\n            onChange={(e: any) => { setY(e.target.value) }}\n      />\n      </div>\n\n      <div>\n      <label> Video height:{vh} </label>\n      <input type=\"range\"\nmin={400} max={1080} step={20} value={vh}\n      onChange={(e:any) => { setVH(e.target.value) } }/>\n      </div>\n      <div>\n      <label> Scale:{sz}</label>\n      <input type=\"range\"\nmin={0.1} max={2} value={sz} step={0.05}\n      onChange={(e:any) => { setSz(e.target.value) } }/>\n      </div>\n\n      <div>\n      <label> alpha:{a} </label>\n      <input type=\"range\"\nmin={0.1} max={1} value={a} step={0.1}\n      onChange={(e:any) => { setA(e.target.value) } }/>\n      </div>\n\n      <div>\n      <label> Padding left: {margin.l} </label>\n      <input type=\"range\"\nmin={0} max={400} value={margin.l} step={20} width={100}\n      onChange={(e:any) => { setMargin({...margin, l:parseInt(e.target.value)}) } }/>\n      </div>\n\n      <div>\n      <label> Padding right: {margin.r} </label>\n      <input type=\"range\"\nmin={0} max={400} value={margin.r} step={20} width={100}\n      onChange={(e:any) => { setMargin({...margin, r:parseInt(e.target.value)}) } }/>\n      </div>\n\n      <div>\n      <label> Padding Top: {margin.u} </label>\n      <input type=\"range\"\nmin={0} max={400} value={margin.u} step={20}\n      onChange={(e:any) => { setMargin({...margin, u:parseInt(e.target.value)}) } }/>\n      </div>\n\n        <div>\n      <label> Padding Bottom: {margin.d} </label>\n      <input type=\"range\"\nmin={0} max={400} value={margin.d} step={20}\n      onChange={(e:any) => { setMargin({...margin, d:parseInt(e.target.value)}) } }/>\n      </div>\n      </div>\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ThemeProvider } from 'emotion-theming'\nimport theme from '@rebass/preset'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n    <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}